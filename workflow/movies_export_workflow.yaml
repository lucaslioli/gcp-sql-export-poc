# This is a sample workflow executes a Batch job passing 
# using a Container Registry image.
main:
    params: [input]
    steps:
        - init:
            assign:
            - project: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
            - location: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
            - jobId: "export-test-job-{{workflow.uid}}"
            - imageUri: "gcr.io/data-ai-sandbox/movies-export:latest"
        - create_db_job:
            call: googleapis.batch.v1.projects.locations.jobs.create
            args:
                parent: ${"projects/" + project + "/locations/" + location}
                
                body:
                    priority: 99
                    taskGroups:
                        taskSpec:
                            runnables:
                                - container:
                                    imageUri: ${imageUri}
                                    commands:
                                        - "python"
                                        - "db_creation.py"
                                        - "--loglevel"
                                        - "INFO"
                            computeResource:
                                cpuMilli: 1000
                                memoryMib: 512
                        taskCount: 1
                    allocationPolicy:
                        instances:
                            - policy:
                                provisioningModel: "STANDARD"
                                machineType: "e2-micro"
                    logsPolicy:
                        destination: "CLOUD_LOGGING"
            result: createDbResult

        - sql_export_job:
            call: googleapis.batch.v1.projects.locations.jobs.create
            args:
                parent: ${"projects/" + project + "/locations/" + location}
                
                body:
                    priority: 99
                    taskGroups:
                        taskSpec:
                            runnables:
                                - container:
                                    imageUri: ${imageUri}
                                    commands:
                                        - "python"
                                        - "sql_export.py"
                                        - "--loglevel"
                                        - "INFO"
                            computeResource:
                                cpuMilli: 1000
                                memoryMib: 512
                        taskCount: 1
                    allocationPolicy:
                        instances:
                            - policy:
                                provisioningModel: "STANDARD"
                                machineType: "e2-micro"
                    logsPolicy:
                        destination: "CLOUD_LOGGING"
            result: csvExportResult

        - returnOutput:
                return: ${csvExportResult}
